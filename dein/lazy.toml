[[plugins]]
repo='rhysd/git-messenger.vim'
on_cmd='GitMessenger'
on_map='<Plug>(git-messenger)'
depends=['scuttle.vim']
hook_add='''
Scuttle <Leader>, (git) Show git message for current line
nmap <Leader>, :GitMessenger<CR>
'''

[[plugins]]
repo='dstein64/vim-startuptime'
on_cmd=['StartupTime']

[[plugins]]
repo='danro/rename.vim'
on_cmd=['Rename', 'rename']

[[plugins]]
repo = 'ap/vim-css-color'
on_ft=['css', 'scss', 'sass', 'less']

[[plugins]]
repo='tpope/vim-rails'
on_ft='ruby'

[[plugins]]
repo='jocap/rich.vim'
on_ft='markdown'

[[plugins]]
repo = 'thinca/vim-ft-diff_fold'
on_ft='diff'

[[plugins]]
repo = 'thinca/vim-ft-help_fold'
on_ft='help'

[[plugins]]
repo='rcmdnk/vim-markdown'
on_ft="markdown"

[[plugins]]
repo='leafgarland/typescript-vim'
on_ft="typescript"

[[plugins]]
repo='neoclide/jsonc.vim'
on_ft=['json', 'jsonc']
hook_add='''
augroup jsonc_ft
  au!
  autocmd BufNewFile,BufRead *.json set syntax=jsonc
augroup END
'''

[[plugins]]
repo='AndrewRadev/tagalong.vim'
on_ft=['html', 'xml', 'jsx', 'eruby', 'ejs', 'eco', 'php', 'htmldjango', 'javascriptreact', 'typescriptreact']

[[plugins]]
repo='captbaritone/better-indent-support-for-php-with-html'
on_ft='php'

[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source=['defx.nvim']

[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source=['defx.nvim']

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
" Shortcut (defx) <Leader>\ load defx
Scuttle <Leader>\ (defx) Show defx pane
nnoremap <Leader>\ :Defx<CR>

Scuttle <Leader>| (defx) Show current file in defx

nnoremap <Leader>\| :Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
'''
hook_source = '''
call defx#custom#option('_', {
    \ 'winwidth': 30,
    \ 'split': 'vertical',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 0,
    \ 'buffer_name': 'defxplorer',
    \ 'columns': 'git:icons:indent:filename:type',
    \ 'toggle': 1,
    \ 'resume': 1,
    \ })
'''
[plugins.ftplugin]
defx = '''
nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> l
\ defx#do_action('open')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> o
\ defx#do_action('open_or_close_tree')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> M
\ defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> C
\ defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
nnoremap <silent><buffer><expr> S
\ defx#do_action('toggle_sort', 'time')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> !
\ defx#do_action('execute_command')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> .
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> ;
\ defx#do_action('repeat')
nnoremap <silent><buffer><expr> h
\ defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#do_action('cd')
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> cd
\ defx#do_action('change_vim_cwd')
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
let g:echodoc#type = 'virtual'
call echodoc#enable()
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
if = 'has("nvim")'
hook_source = '''
let g:float_preview#docked = 0
let g:float_preview#max_width = 60
let g:float_preview#max_height = 20
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
function! InitCaw() abort
  if !&l:modifiable
    silent! nunmap <buffer> gc
    silent! xunmap <buffer> gc
    silent! nunmap <buffer> gcc
    silent! xunmap <buffer> gcc
  else
    nmap <buffer> gc <Plug>(caw:prefix)
     xmap <buffer> gc <Plug>(caw:prefix)
     nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
     xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
   endif
 endfunction
augroup Caw
    au!
     autocmd Caw FileType * call InitCaw()
    augroup END
 call InitCaw()
 '''

[[plugins]]
repo = 'Olical/vim-enmasse'
on_cmd=['EnMasse']

[[plugins]]
repo = 'chrisbra/NrrwRgn'
on_cmd=['NR','NW','WR','NRV ','NUD','NRP','NRM','NRS','NRN','NRL']

[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd=['Goyo']

